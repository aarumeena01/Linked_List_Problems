Node  *getMid(Node *head){
    Node *slow = head;
    Node *fast = head->next;
    while(fast != NULL && fast->next != NULL){
        fast = fast->next->next;
        slow = slow->next;
    }
    return slow;
}
// make reverse fnc 
Node *reverse(Node *head){
    Node *curr = head;
    Node *prev = NULL;
    Node *next = NULL;
    while(curr != NULL){
      next = curr->next;
      curr->next = prev;
      prev = curr;
      curr = next;
    }
    return prev;
    
}
bool isPalindrome(Node *head)
{
    // base cases
    if(head->next == NULL)
       return true;
    // step 1 find middle element of linked list
    Node *middle = getMid(head);

    // step 2 reverse half linked list
    Node* temp = middle->next;
    middle->next = reverse(temp);
    
    // step 3 comparee each half part of linked list
    Node *head1 = head;
    Node *head2 = middle->next;
    while(head2 != NULL){
        if(head1->data != head2->data){
            return false;
        }
        head1 = head1->next;
        head2 = head2->next;
    }
    temp = middle->next;
    middle->next = reverse(temp);
    return true;
}
